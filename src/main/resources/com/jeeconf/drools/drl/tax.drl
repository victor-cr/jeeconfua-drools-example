package com.jeeconf.drools.drl
dialect "mvel"

import java.util.List;
import java.math.BigDecimal;

import com.jeeconf.drools.bean.*;

global org.slf4j.Logger log;

// START Prefetch

rule "Fetch all parties"
when
    TransactionRecord( $party : party )
    not( Party( this == $party ) )
then
    insert( $party );
end

rule "Fetch all counter parties"
when
    TransactionRecord( $party : counterParty )
    not( Party( this == $party ) )
then
    insert( $party );
end

// END Prefetch

rule "Fixed tax - category I"
when
    $party : Taxpayer( category == Category.I )
    not( HasTaxExemption( party == $party ) )
    not( HasViolations( party == $party ) )
then
    insertLogical( new TaxRecord( $party, 100 ) )
end

rule "Fixed tax - category II"
when
    $party : Taxpayer( category == Category.II )
    not( HasTaxExemption( party == $party ) )
    not( HasViolations( party == $party ) )
then
    insertLogical( new TaxRecord( $party, 200 ) )
end

rule "Percentage tax - category III"
when
    $party : Taxpayer( category == Category.III )
    not( HasTaxExemption( party == $party ) )
    not( HasViolations( party == $party ) )
    $transaction : TransactionRecord( party == $party, amount > 0, $amount : amount )
then
    insertLogical( new TaxRecord( $party, $amount * 0.05 ) )
end

rule "Percentage tax - general case"
when
    $party : Taxpayer( category == Category.NONE )
    not( HasTaxExemption( party == $party ) )
    not( HasViolations( party == $party ) )
    $transaction : TransactionRecord( party == $party, $amount : amount )
then
    insertLogical( new TaxRecord( $party, $amount * 0.17 ) )
end

// Limits

query isOverLimit ( Party $party, BigDecimal $limit )
    BigDecimal( plus > $limit )
           from accumulate( TransactionRecord( party == $party, amount > 0, $amount : amount ),
                            init( BigDecimal sum = 0; ),
                            action( sum += $amount; ),
                            result( sum ) )
end

rule "Limit exceeded - category I"
when
    $party : Taxpayer( category == Category.I )
    isOverLimit( $party, 150000; )
then
    insertLogical( new HasViolations( $party ) )
end

rule "Limit exceeded - category II"
when
    $party : Taxpayer( category == Category.II )
    isOverLimit( $party, 1000000; )
then
    insertLogical( new HasViolations( $party ) )
end

rule "Limit exceeded - category III"
when
    $party : Taxpayer( category == Category.III )
    isOverLimit( $party, 3000000; )
then
    insertLogical( new HasViolations( $party ) )
end

// Negative tax

rule "Correct negative taxes"
when
    $party : Taxpayer( category == Category.NONE )
    $sum : BigDecimal( plus < 0 )
           from accumulate( TaxRecord( party == $party, correction == false, $amount : amount ),
                            init( BigDecimal sum = 0; ),
                            action( sum += $amount; ),
                            result( sum ) )
then
    insertLogical( new TaxRecord( $party, $sum.negate(), true ) );
end

// Total

rule "Transaction records total"
when
    $party : Taxpayer()
    not ( TotalRecord( party == $party ) )
    $transactionSum : BigDecimal()
                      from accumulate( TransactionRecord( party == $party, $amount : amount ),
                                       init( BigDecimal sum = 0; ),
                                       action( sum += $amount; ),
                                       result( sum ) )
then
    insert( new TotalRecord( $party, $transactionSum, 0 ) );
end

rule "Tax records total"
when
    $party : Taxpayer()
    $taxSum : BigDecimal()
              from accumulate( TaxRecord( party == $party, $amount : amount ),
                               init( BigDecimal sum = 0; ),
                               action( sum += $amount; ),
                               result( sum ) )
    $total : TotalRecord( party == $party, taxAmount != $taxSum )
then
    retract( $total )
    insert( new TotalRecord( $party, $total.transactionAmount, $taxSum ) )
end

// Tax exepmtions

declare HasTaxExemption
    party : Taxpayer @key
end

rule "IT company pays 10% of profit"
when
    $company : Company( specialRoles contains Role.IT )
    not( HasViolations( party == $company ) )
    $transaction : TransactionRecord( party == $company, $amount : amount )
then
    insertLogical( new HasTaxExemption( $company ) )
    insertLogical( new TaxRecord( $company, $amount * 0.10 ) )
end

rule "IT entrepreneur-student does not pay taxes"
when
    $party : Entrepreneur( specialRoles contains Role.IT, specialRoles contains Role.STUDENT )
    not( HasViolations( party == $party ) )
then
    insertLogical( new HasTaxExemption( $party ) )
    insertLogical( new TaxRecord( $party, 0 ) )
end

rule "Entrepreneur-orphan or -disabled does not pay taxes"
when
    $party : Entrepreneur( specialRoles contains Role.ORPHAN || specialRoles contains Role.DISABLED )
    not( HasViolations( party == $party ) )
then
    insertLogical( new HasTaxExemption( $party ) )
    insertLogical( new TaxRecord( $party, 0 ) )
end

// Violations

declare HasViolations
    party : Taxpayer @key
end

rule "Handle generic violation"
when
    $party : Taxpayer()
    HasViolations( party == $party )
    $transaction : TransactionRecord( party == $party, $amount : amount )
then
    log.warn( "Violation. Party: " + $party )

    insertLogical( new TaxRecord( $party, $amount * 0.20 ) )
end

// Fixed tax payer limitation

rule "Category I and II cannot deal with any company"
when
    eval( false ) // Let's do it
then
    insertLogical( new HasViolations( $party ) )
end

